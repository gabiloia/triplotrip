import{ar as j,ay as w,az as S,aA as O,d as P,ab as _,aG as k,aH as C,q as B,ba as F,bb as I,aK as x}from"./BF1SYJr_.js";const L=j("n-form"),R=j("n-form-item-insts"),K=w("form",[S("inline",`
 width: 100%;
 display: inline-flex;
 align-items: flex-start;
 align-content: space-around;
 `,[w("form-item",{width:"auto",marginRight:"18px"},[O("&:last-child",{marginRight:0})])])]);var V=function(t,m,o,i){function h(s){return s instanceof o?s:new o(function(f){f(s)})}return new(o||(o=Promise))(function(s,f){function y(n){try{e(i.next(n))}catch(d){f(d)}}function r(n){try{e(i.throw(n))}catch(d){f(d)}}function e(n){n.done?s(n.value):h(n.value).then(y,r)}e((i=i.apply(t,m||[])).next())})};const q=Object.assign(Object.assign({},C.props),{inline:Boolean,labelWidth:[Number,String],labelAlign:String,labelPlacement:{type:String,default:"top"},model:{type:Object,default:()=>{}},rules:Object,disabled:Boolean,size:String,showRequireMark:{type:Boolean,default:void 0},requireMarkPlacement:String,showFeedback:{type:Boolean,default:!0},onSubmit:{type:Function,default:t=>{t.preventDefault()}},showLabel:{type:Boolean,default:void 0},validateMessages:Object}),N=P({name:"Form",props:q,setup(t){const{mergedClsPrefixRef:m}=k(t);C("Form","-form",K,F,t,m);const o={},i=B(void 0),h=r=>{const e=i.value;(e===void 0||r>=e)&&(i.value=r)};function s(r){return V(this,arguments,void 0,function*(e,n=()=>!0){return yield new Promise((d,M)=>{const v=[];for(const u of I(o)){const g=o[u];for(const a of g)a.path&&v.push(a.internalValidate(null,n))}Promise.all(v).then(u=>{const g=u.some(l=>!l.valid),a=[],c=[];u.forEach(l=>{var p,b;!((p=l.errors)===null||p===void 0)&&p.length&&a.push(l.errors),!((b=l.warnings)===null||b===void 0)&&b.length&&c.push(l.warnings)}),e&&e(a.length?a:void 0,{warnings:c.length?c:void 0}),g?M(a.length?a:void 0):d({warnings:c.length?c:void 0})})})})}function f(){for(const r of I(o)){const e=o[r];for(const n of e)n.restoreValidation()}}return x(L,{props:t,maxChildLabelWidthRef:i,deriveMaxChildLabelWidth:h}),x(R,{formItems:o}),Object.assign({validate:s,restoreValidation:f},{mergedClsPrefix:m})},render(){const{mergedClsPrefix:t}=this;return _("form",{class:[`${t}-form`,this.inline&&`${t}-form--inline`],onSubmit:this.onSubmit},this.$slots)}});export{N,R as a,L as f};
